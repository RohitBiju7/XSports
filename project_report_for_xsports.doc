XSports Project Report
Project Title      : XSports – Online Sports Commerce Platform
Prepared by        : XSports Development Team
Latest Revision    : 01 November 2025
Database Snapshot  : xsports.sql (exported 01 November 2025)


CHAPTER 1
INTRODUCTION

1.1 ABOUT THE PROJECT
Technology driven sport retailing demands a robust presence on the digital marketplace. XSports is an end-to-end web application that enables customers to discover, compare and purchase sports equipment and apparel while administrators manage inventory, orders and after-sales support. The platform is designed as a PHP based solution deployable on the WAMP stack and emphasises responsive design, size-aware inventory tracking and conversational support between customers and staff.

1.2 PURPOSE OF THE DOCUMENT
This report documents the complete life cycle of the XSports project. It mirrors the structure of the reference template and provides stakeholders with a consolidated view of objectives, scope, feasibility, design artefacts, implementation decisions, database design, testing strategy and future roadmap. The document serves as a baseline for academic submission, onboarding of new contributors and operational hand-over.

1.3 PROJECT OBJECTIVES
Deliver a unified online sports retail experience.
Provide secure registration, authentication and personalised dashboards for customers.
Offer fast product discovery through category pages, search and curated listings.
Maintain accurate stock at both product and size level across the catalogue.
Enable COD checkout with address selection, tax computation and order history.
Equip administrators with product maintenance, stock control and order governance tools.
Facilitate two-way support ticket conversations between customers and administrators.

1.4 SCOPE OF THE PROJECT
The project encompasses customer facing storefront flows (catalogue browsing, wishlist, cart, checkout), customer account management, order management and the administrative console for catalogue, stock and support operations. Integration with external payment gateways and shipping APIs is excluded from the current release. The solution is targeted at small or midsized sports retailers deploying on WAMP/LAMP environments.


CHAPTER 2
SYSTEM STUDY AND PROBLEM FORMULATION

2.1 EXISTING SYSTEM
Traditional sports retail relies heavily on walk-in purchases and manual spreadsheets for stock tracking. Customers have limited visibility into inventory availability, sizing combinations and delivery capabilities. Administrative staff spend substantial time reconciling orders, allocating inventory and handling support through phone or email threads.

2.2 PROBLEMS WITH THE EXISTING SYSTEM
Time consuming order capture and fulfilment.
Limited catalogue reach beyond the retail outlet.
Manual inventory adjustments leading to discrepancies.
Fragmented customer support interactions with minimal traceability.
Lack of analytics on product demand and returns.
Minimal security around customer data and transaction history.

2.3 PROPOSED SYSTEM
XSports digitises the retail flow. Customers authenticate, explore the catalogue, place orders with size specific constraints and track order history. The system automatically adjusts global and size level stock as orders are confirmed or cancelled, ensuring real-time visibility. Administrators curate the catalogue, review incoming orders, confirm or reject fulfilment and communicate via ticket chat. Support for repeat actions (recently enhanced to prevent stock inflation on multiple admin toggles) maintains data integrity.

2.4 FEATURES OF THE NEW SYSTEM
Responsive storefront optimised for desktop and mobile browsing.
Category specific landing pages for Running, Fitness &amp; Clothing, Football, Badminton, Tennis, Cycling and Swimming.
Search interface with keyword filtering and price visibility.
Wishlist and cart persistence per authenticated user.
Checkout with address selection, tax/shipping calculation and COD finalisation.
Admin order dashboard with confirm/cancel/reject/clear workflow and concurrency safety.
Real-time stock synchronisation across products and product_sizes tables.
Support ticket module with threaded conversations and role aware access.
Admin dashboard analytics with revenue trends, category performance and live inventory charts.

2.5 FEASIBILITY STUDY
The project feasibility has been examined under technical, economic and operational perspectives.

2.5.1 Technical Feasibility
The solution leverages widely adopted technologies: PHP 8.x, MySQL 9.x, HTML5, CSS3 and JavaScript. The monolithic architecture minimises infrastructure complexity. PDO with prepared statements offers compatibility with most MySQL releases. The latest fix to admin order workflows demonstrates manageable development risk within the current stack.

2.5.2 Economic Feasibility
Development utilises open-source tooling (PHP, MySQL, Apache, VS Code/Cursor). Hosting on commodity Windows or Linux servers reduces capital expenditure. Automation of stock reconciliation and order reporting reduces staff hours, offsetting initial customisation costs. Scalability to cloud instances remains possible if demand increases.

2.5.3 Operational Feasibility
User interfaces follow web conventions and require minimal training. Admins can onboard quickly to the dashboard for catalogue updates. Customers benefit from self-service order history and cancellations subject to business rules. Support chat delivers auditable history and reduces unstructured communication. Ongoing operations are realistic for small teams.

2.5.4 Schedule Feasibility
The current release was completed over iterative sprints focusing on catalogue ingestion, checkout, admin tooling and support. Future enhancements (online payments, analytics) can be planned as incremental modules without disrupting core operations.


CHAPTER 3
SYSTEM SPECIFICATION

3.1 HARDWARE SPECIFICATION
Server / Host Machine:
Processor          :   Quad Core 2.5 GHz or higher (Intel/AMD)
RAM                :   8 GB minimum (16 GB recommended for concurrent users)
Storage            :   100 GB SSD with daily backup policy
Network            :   Stable broadband with 10 Mbps upload or better

Client Workstations:
Processor          :   Dual Core 2.0 GHz or higher
RAM                :   4 GB minimum
Display            :   15" FHD monitor or equivalent
Input Devices      :   Standard keyboard and mouse

3.2 SOFTWARE SPECIFICATION
Operating System   :   Windows 10 / 11 (WAMP) or Ubuntu 22.04 (LAMP)
Web Server         :   Apache 2.4+
Backend Language   :   PHP 8.1+
Database Server    :   MySQL 9.1.0 (compatible with 8.x)
Client Interface   :   HTML5, CSS3, JavaScript
Auxiliary Tools    :   Composer (optional), Git, phpMyAdmin, PowerShell/Terminal

3.3 SELECTION OF SOFTWARE
The technology stack has been selected for accessibility, maintainability and rapid development.

PHP
PHP powers the server-side logic, rendering views and orchestrating checkout, authentication and admin workflows. Its low learning curve and native session handling simplify development. Recent fixes (idempotent admin reject/confirm actions) rely on transactional PDO operations that are well supported in PHP.

JavaScript
Client-side enhancements rely on vanilla JavaScript for dynamic UI interactions such as size selection, cart count updates and asynchronous ticket chat refreshes. Framework agnostic design keeps assets lightweight.

MySQL
MySQL offers relational integrity, transactional support and compatibility with hosting providers. The schema defined in xsports.sql covers customer master data, catalogue, order lifecycles and support communication. Indexes on primary/foreign keys ensure acceptable performance for current data volumes.

HTML & CSS
Semantic HTML and modular CSS (assets/style.css) guarantee responsive layouts across pages. Consistent design tokens deliver uniform branding throughout the storefront.


CHAPTER 4
SYSTEM DEVELOPMENT

4.1 TABLE DESIGN
Database design emphasises normalised storage with separate master and transaction tables. Key tables include:

users (id, email, password, name, phone, created_at) – stores registered customers with hashed credentials.
admins (id, email, password) – authentication records for administrative users.
products (id, name, brand, price, image_path, category, description, quantity, created_at, has_sizes) – catalogue master with global stock indicator.
product_sizes (id, product_id, size, stock) – size level inventory aligned through product_id foreign key.
cart_items (user_id, product_id, quantity, size) – composite key ensures per-user per-size uniqueness.
wishlist (user_id, product_id) – maintains customer preferences.
addresses (id, user_id, address_line, city, state, pincode, selected) – shipping addresses with default flag.
orders (id, user_id, address_id, payment_method, subtotal, shipping, tax, total, status, created_at, admin_confirmed) – sales transaction header with admin workflow state.
order_items (id, order_id, product_id, product_name, brand, price, quantity, image_path, size) – line level details referencing ordered products.
support_tickets (id, user_id, subject, description, status, created_at, updated_at) – customer service requests.
support_messages (id, ticket_id, sender_type, message, created_at) – threaded conversation tied to tickets.

The schema exported on 01 November 2025 incorporates the admin_confirmed flag, ensuring auditability of admin actions.

4.2 INPUT DESIGN
Input forms are engineered to minimise errors and streamline data entry.
Sign-up and login forms validate email formats and enforce password hashing via password_hash().
Product forms in admin enforce numeric constraints on price, quantity and size stock while sanitising text fields.
Checkout form requires address selection, payment method selection and acknowledges stock availability before committing an order.
Support ticket forms accept subject and description with server-side trimming to prevent blank submissions.

4.3 OUTPUT DESIGN
Customer outputs comprise responsive product cards, detailed product pages, cart summaries and order invoices (invoice.php). Each page balances textual, numerical and visual information for clarity.
Administrative outputs include the consolidated order dashboard (admin_orders.php) with status chips, confirm/reject/cancel controls and inline order item listings. Stock adjustments are transactional and feedback messages communicate success or conflicts (already confirmed or cancelled states).
Support outputs render conversation timelines with sender differentiation to streamline resolution tracking.

4.4 DATAFLOW DIAGRAM
Context Level (Level 0) Dataflow:
External Entities: Customer, Administrator, Delivery Partner (conceptual), Support Team.
Processes: Browse & Purchase, Order Fulfilment, Stock Management, Support Interaction.
Data Stores: Catalogue Database (products, product_sizes), Transaction Database (orders, order_items), User Accounts (users, addresses), Support Repository (support_tickets, support_messages).
Data flows capture customer queries to catalogue, order submissions updating transactions and inventory adjustments, support messages routing between users and admins, and admin panel actions updating master data.

Level 1 Dataflow (Checkout Process):
Customer selects product and size → system verifies availability → cart persists selection → checkout confirms address → order creation subtracts product quantity and size stock → admin confirmation toggles admin_confirmed status → rejection or cancellation invokes stock restoration exactly once per order state transition.

4.5 ENTITY RELATIONSHIP OVERVIEW
users 1..* addresses, orders, support_tickets.
orders 1..* order_items with product_id referencing products.
products 1..* product_sizes, enabling multiple sizes per product.
support_tickets 1..* support_messages with sender_type enumerating user or admin.
Composite primary keys in cart_items and wishlist enforce uniqueness without redundant identifiers.

4.6 MODULE OVERVIEW
Customer Module – registration, authentication, profile dashboard, order history and support ticket creation.
Catalogue Module – category pages, product detail, size availability retrieval via get_product_sizes.php.
Cart & Checkout Module – add/update cart, buy-now, checkout and order placement with transactional stock handling.
Admin Module – product management (admin.php), size stock maintenance, order governance (admin_orders.php) with idempotent confirmation/rejection, and admin creation (create_admin.php).
Support Module – support.php (ticket submission) and admin_ticket_chat.php (two-way messaging) with read receipts implied through timestamps.


CHAPTER 5
SYSTEM IMPLEMENTATION

5.1 DEVELOPMENT APPROACH
The application follows incremental feature delivery. Shared components (header/footer) were abstracted first to guarantee consistent navigation. Business logic resides in dedicated handler scripts to maintain separation from templates. Database connections employ PDO with transactions for critical operations (checkout, admin order handling) to maintain data consistency.

5.2 KEY IMPLEMENTATION DETAILS
Authentication – login_process.php validates credentials against hashed passwords and manages session regeneration.
Inventory Control – checkout.php decrements product_sizes and products atomically. admin_orders.php includes safeguards so repeated reject actions do not inflate stock, ensuring idempotency and mitigating the defect observed in earlier builds.
Order Lifecycle – statuses transition from placed to confirmed to delivered or cancelled. Admin actions update both status and admin_confirmed flags, and clear removes cancelled orders post reconciliation.
Support Chat – ticket_chat.php ensures the latest messages render without manual refresh while keeping a permanent audit trail in the database.
Analytics – admin_dashboard.php aggregates orders, revenue and inventory, rendering interactive charts via Chart.js for at-a-glance insights.

5.3 SECURITY AND COMPLIANCE
Sessions are started at the top of PHP scripts and restricted to HTTPS ready deployment. PDO prepared statements protect against SQL injection. Passwords use bcrypt hashing via PHP’s password hashing API. Administrative routes enforce admin_logged_in checks and redirect unauthorised users. Upload directories are segregated under images with controlled file references.


CHAPTER 6
TESTING AND VALIDATION

6.1 TEST STRATEGY
Testing combines manual functional walkthroughs with database verification using phpMyAdmin. Critical flows (checkout, admin confirmation or rejection, support messaging) are regression tested after each iteration. Transactions are inspected to confirm stock counts align with expectations.

6.2 SAMPLE TEST CASES
TC-001: User registration with valid inputs → expect new record in users, redirect to signin.
TC-002: Invalid login attempt → expect error message and no session creation.
TC-003: Checkout with limited size stock → verify stock decrements correctly and order reflects in orders and order_items.
TC-004: Admin confirms then rejects order → expect single stock restoration and status update to cancelled, with no additional stock change on repeated rejection (fix verified on 01 Nov 2025).
TC-005: Support ticket conversation → ensure messages persist with appropriate sender_type and timestamp ordering.

6.3 DEFECT MANAGEMENT
Defects are tracked informally using Git issue tags. Recent resolution: prevented stock over-allocation when administrators toggled the same order repeatedly. Fix implemented by short-circuiting repeated state transitions in admin_orders.php and updating the UI to hide the confirm button on cancelled orders.


CHAPTER 7
CONCLUSION AND FUTURE ENHANCEMENTS

7.1 CONCLUSION
XSports delivers a comprehensive digital storefront tailored for sports retail. It centralises catalogue management, ensures transactional integrity and equips administrators with visibility over the fulfilment pipeline. The architecture and codebase are positioned for gradual scaling and future integration work.

7.2 FUTURE ENHANCEMENTS
Integrate payment gateways (UPI/cards) with order status synchronisation.
Implement inventory forecasting and low stock alerts via scheduled jobs.
Add wishlist email reminders and personalisation.
Introduce role based admin privileges (product manager, support agent, super admin).
Containerise deployment using Docker for repeatable environments.

7.3 DEPLOYMENT AND MAINTENANCE PLAN
Maintain version control via Git with feature branching. Schedule weekly database backups and quarterly security reviews. Monitor server logs for anomalies and patch PHP or MySQL releases promptly. User facing incidents should be triaged through the support ticket module to maintain communication history.


APPENDIX A – INSTALLATION AND CONFIGURATION
1. Install WAMP or LAMP stack and ensure PHP meets the minimum version.
2. Place the project folder into the web server root (c:\wamp64\www\xsports or /var/www/html/xsports).
3. Create the MySQL schema and import xsports.sql using mysql CLI or phpMyAdmin.
4. Optional: run orders_tables.sql if the orders module has not been initialised previously.
5. Update includes/db.php with environment specific credentials.
6. Access create_admin.php to register the first admin account securely.
7. Launch the site at http://localhost/xsports/ and perform smoke tests (browse catalogue, sign in, place test order, execute admin confirm/reject cycle).

APPENDIX B – KEY SOURCE FILES
Root Level Pages: index.php, product.php, cart.php, checkout.php, orders.php, order_cancel.php.
Handlers: add_to_cart.php, update_cart.php, buy_now.php, login_process.php, signup_process.php.
Admin Tools: admin.php, admin_orders.php, admin_support.php, admin_ticket_chat.php, create_admin.php.
Includes: includes/header.php, includes/footer.php, includes/db.php.
Assets: assets/style.css, images/ (category, product and hero imagery).
Database Artefacts: xsports.sql, orders_tables.sql, migrations/run_migration.php.

APPENDIX C – GLOSSARY
COD – Cash on Delivery.
DFD – Data Flow Diagram.
ER – Entity Relationship.
PDO – PHP Data Objects, database abstraction layer used in the project.
SKU – Stock Keeping Unit, represented by product plus size combination in the system.

APPENDIX D – CHANGE LOG (RECENT)
25 Oct 2025 – Added support ticket chat enhancements and admin status ribbons.
28 Oct 2025 – Introduced admin_confirmed column via migration script.
01 Nov 2025 – Resolved repeated rejection stock inflation bug, updated admin UI logic.
01 Nov 2025 – Added analytics visualisations to the admin dashboard (revenue/order trends, sales by category, inventory distribution).

